/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/jsonld/context.py
 */
package trld.jsonld;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.Common.loadJson;
import static trld.Common.warning;
import static trld.Common.resolveIri;
import static trld.jsonld.Base.*;

public class Context {

  public static final String DEFAULT_PROCESSING_MODE = JSONLD11;
  public static final Integer MAX_REMOTE_CONTEXTS = 512;

  public Map</*@Nullable*/ String, Term> terms;
  public String baseIri;
  public /*@Nullable*/ String originalBaseUrl;
  public /*@Nullable*/ Map inverseContext;
  public /*@Nullable*/ String vocabularyMapping;
  public /*@Nullable*/ String defaultLanguage;
  public /*@Nullable*/ String defaultBaseDirection;
  public Boolean propagate;
  public /*@Nullable*/ Context previousContext;
  public String processingMode;
  public /*@Nullable*/ Double version;

  public Context(/*@Nullable*/ String baseIri) {
    this(baseIri, null);
  }
  public Context(/*@Nullable*/ String baseIri, /*@Nullable*/ String originalBaseUrl) {
    this.initialize(baseIri, originalBaseUrl);
  }

  public void initialize(/*@Nullable*/ String baseIri) {
    this.initialize(baseIri, null);
  }
  public void initialize(/*@Nullable*/ String baseIri, /*@Nullable*/ String originalBaseUrl) {
    this.terms = new HashMap<>();
    this.baseIri = (baseIri == null ? "" : baseIri);
    if (originalBaseUrl != null) {
      this.originalBaseUrl = originalBaseUrl;
    } else {
      this.originalBaseUrl = null;
    }
    this.vocabularyMapping = null;
    this.defaultLanguage = null;
    this.defaultBaseDirection = null;
    this.propagate = true;
    this.previousContext = null;
    this.processingMode = DEFAULT_PROCESSING_MODE;
    this.version = null;
    this.inverseContext = null;
  }

  public Context copy() {
    Context cloned = new Context(this.baseIri, this.originalBaseUrl);
    cloned.terms = new HashMap(this.terms);
    cloned.vocabularyMapping = (String) this.vocabularyMapping;
    cloned.defaultLanguage = (String) this.defaultLanguage;
    cloned.defaultBaseDirection = (String) this.defaultBaseDirection;
    cloned.processingMode = (String) this.processingMode;
    return cloned;
  }

  public Context getContext(Object contextData) {
    return this.getContext(contextData, null);
  }
  public Context getContext(Object contextData, String baseUrl) {
    return this.getContext(contextData, baseUrl, null);
  }
  public Context getContext(Object contextData, String baseUrl, Set<String> remoteContexts) {
    return this.getContext(contextData, baseUrl, remoteContexts, false);
  }
  public Context getContext(Object contextData, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected) {
    return this.getContext(contextData, baseUrl, remoteContexts, overrideProtected, true);
  }
  public Context getContext(Object contextData, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) {
    if (remoteContexts == null) {
      remoteContexts = new HashSet();
    }
    Context localContext = (Context) this.copy();
    if (contextData instanceof Map) {
      Object propagate = (Object) ((Map) contextData).get(PROPAGATE);
      if (propagate instanceof Boolean) {
        localContext.propagate = (Boolean) propagate;
      }
    }
    if (localContext.previousContext == null) {
      localContext.previousContext = this;
    }
    localContext.readContext(contextData, baseUrl, remoteContexts, overrideProtected, validateScoped);
    return localContext;
  }

  protected void readContext(Object contextData, /*@Nullable*/ String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) {
    List<Object> normalizedContextData;
    if (contextData instanceof List) {
      normalizedContextData = (List) contextData;
    } else {
      normalizedContextData = new ArrayList<>(Arrays.asList(new Object[] {(Object) contextData}));
    }
    if (baseUrl == null) {
      baseUrl = (String) this.baseIri;
    }
    for (Object context : normalizedContextData) {
      if (context == null) {
        if ((overrideProtected == false && this.terms.values().stream().anyMatch(term -> term.isProtected))) {
          throw new InvalidContextNullificationError();
        }
        /*@Nullable*/ Context prev = (this.propagate == false ? this.copy() : null);
        this.initialize(baseUrl, baseUrl);
        if (prev != null) {
          this.previousContext = prev;
        }
        continue;
      }
      if (context instanceof String) {
        this.readContextLink((String) context, baseUrl, remoteContexts, overrideProtected, validateScoped);
      } else if (context instanceof Map) {
        this.readContextDefinition((Map) context, baseUrl, remoteContexts, overrideProtected, validateScoped);
      } else {
        throw new InvalidLocalContextError();
      }
    }
  }

  protected void readContextLink(String href, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) {
    try {
      href = resolveIri(baseUrl, href);
    } catch (Exception e) {
      throw new LoadingDocumentFailedError();
    }
    if ((!(validateScoped) && remoteContexts.contains(href))) {
      return;
    }
    if (remoteContexts.size() > MAX_REMOTE_CONTEXTS) {
      throw new ContextOverflowError();
    } else {
      remoteContexts.add(href);
    }
    Object contextDocument = (Object) this.loadDocument(href);
    if ((!(contextDocument instanceof Map) || !((Map) contextDocument).containsKey(CONTEXT))) {
      throw new InvalidRemoteContextError();
    }
    Object loaded = (Object) ((Map) contextDocument).get(CONTEXT);
    this.readContext(loaded, href, new HashSet(remoteContexts), overrideProtected, validateScoped);
  }

  protected Object loadDocument(String href) {
    return this.loadDocument(href, JSONLD_CONTEXT_RELATION);
  }
  protected Object loadDocument(String href, String profile) {
    return this.loadDocument(href, profile, JSONLD_CONTEXT_RELATION);
  }
  protected Object loadDocument(String href, String profile, String requestProfile) {
    /* ... */;
    return loadJson(href);
  }

  protected void readContextDefinition(Map<String, Object> context, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) {
    Object version = (Object) context.get(VERSION);
    if (version != null) {
      if ((this.processingMode == null && ((Object) JSONLD10) == null || this.processingMode != null && (this.processingMode).equals(JSONLD10))) {
        throw new ProcessingModeConflictError();
      }
      if ((version instanceof Double && (version == null && ((Object) 1.1) == null || version != null && (version).equals(1.1)))) {
        this.version = (Double) version;
      } else {
        throw new InvalidVersionValueError();
      }
    }
    if (context.containsKey(IMPORT)) {
      context = this.handleImport(context, baseUrl);
    }
    if ((context.containsKey(BASE) && remoteContexts.size() == 0)) {
      Object base = (Object) context.get(BASE);
      if (base == null) {
        this.baseIri = "";
      } else if ((this.baseIri != null && base instanceof String)) {
        this.baseIri = resolveIri(this.baseIri, (String) base);
      } else if ((base instanceof String && isIri((String) base))) {
        this.baseIri = (String) base;
      } else {
        throw new InvalidBaseIriError();
      }
    }
    if (context.containsKey(VOCAB)) {
      Object vocab = (Object) context.get(VOCAB);
      if (vocab == null) {
        this.vocabularyMapping = null;
      } else if ((vocab instanceof String && (isIriRef((String) vocab) || isBlank((String) vocab)))) {
        this.vocabularyMapping = (String) this.expandDocRelativeVocabIri((String) vocab);
      } else {
        throw new InvalidVocabMappingError();
      }
    }
    if (context.containsKey(LANGUAGE)) {
      Object lang = (Object) context.get(LANGUAGE);
      if (lang == null) {
        this.defaultLanguage = null;
      } else if (lang instanceof String) {
        if (!(isLangTag((String) lang))) {
          warning("Language tag " + lang + " in context is not well-formed");
        }
        this.defaultLanguage = ((String) lang).toLowerCase();
      } else {
        throw new InvalidDefaultLanguageError();
      }
    }
    if (context.containsKey(DIRECTION)) {
      Object direction = (Object) context.get(DIRECTION);
      if ((direction == null || (direction instanceof String && DIRECTIONS.contains(direction)))) {
        this.defaultBaseDirection = (String) direction;
      } else {
        throw new InvalidBaseDirectionError(direction.toString());
      }
    }
    if (context.containsKey(PROPAGATE)) {
      Object propagate = (Object) context.get(PROPAGATE);
      if ((this.processingMode == null && ((Object) JSONLD10) == null || this.processingMode != null && (this.processingMode).equals(JSONLD10))) {
        throw new InvalidContextEntryError();
      }
      if (!(propagate instanceof Boolean)) {
        throw new InvalidPropagateValueError(propagate.toString());
      }
    }
    Map<String, Boolean> defined = new HashMap<>();
    for (Map.Entry<String, Object> key_value : context.entrySet()) {
      String key = key_value.getKey();
      Object value = key_value.getValue();
      if (CONTEXT_KEYWORDS.contains(key)) {
        continue;
      }
      Boolean isprotected = (Boolean) ((Boolean) context.get(PROTECTED));
      new Term(this, context, key, value, defined, baseUrl, isprotected, overrideProtected);
    }
  }

  protected Map handleImport(Map<String, Object> context, String baseUrl) {
    Object importValue = (Object) context.get(IMPORT);
    if ((this.processingMode == null && ((Object) JSONLD10) == null || this.processingMode != null && (this.processingMode).equals(JSONLD10))) {
      throw new InvalidContextEntryError();
    }
    if (!(importValue instanceof String)) {
      throw new InvalidImportValueError(importValue.toString());
    }
    importValue = resolveIri(baseUrl, (String) importValue);
    Object contextDocument = (Object) this.loadDocument((String) importValue);
    if ((!(contextDocument instanceof Map) || !((Map) contextDocument).containsKey(CONTEXT))) {
      throw new InvalidRemoteContextError();
    }
    Object importContext = (Object) ((Map) contextDocument).get(CONTEXT);
    if (!(importContext instanceof Map)) {
      throw new InvalidRemoteContextError();
    }
    if (((Map) importContext).containsKey(IMPORT)) {
      throw new InvalidContextEntryError();
    }
    ((Map) importContext).putAll(context);
    ((Map) importContext).remove(IMPORT);
    return (Map) importContext;
  }

  public /*@Nullable*/ String expandVocabIri(String value) {
    return this.expandIri(value, null, null, false, true);
  }

  public /*@Nullable*/ String expandDocRelativeIri(String value) {
    return this.expandIri(value, null, null, true, false);
  }

  public /*@Nullable*/ String expandDocRelativeVocabIri(String value) {
    return this.expandIri(value, null, null, true, true);
  }

  protected /*@Nullable*/ String expandInitVocabIri(String value, Map<String, Object> localContext, Map<String, Boolean> defined) {
    return this.expandIri(value, localContext, defined, false, true);
  }

  public /*@Nullable*/ String expandIri(String value) {
    return this.expandIri(value, null);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext) {
    return this.expandIri(value, localContext, null);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext, /*@Nullable*/ Map<String, Boolean> defined) {
    return this.expandIri(value, localContext, defined, false);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext, /*@Nullable*/ Map<String, Boolean> defined, Boolean docRelative) {
    return this.expandIri(value, localContext, defined, docRelative, false);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext, /*@Nullable*/ Map<String, Boolean> defined, Boolean docRelative, Boolean vocab) {
    if ((KEYWORDS.contains(value) || value == null)) {
      return value;
    }
    if (hasKeywordForm(value)) {
      warning("Id " + value + " looks like a keyword");
      return null;
    }
    if ((localContext != null && localContext.containsKey(value) && defined != null && (!defined.containsKey(value) || defined.get(value) != true))) {
      new Term(this, localContext, value, localContext.get(value), defined);
    }
    /*@Nullable*/ Term iriTerm = (/*@Nullable*/ Term) this.terms.get(value);
    if ((iriTerm != null && KEYWORDS.contains(iriTerm.iri))) {
      return iriTerm.iri;
    }
    if ((vocab && iriTerm != null)) {
      return iriTerm.iri;
    }
    if ((value.length() > 1 && value.substring(1).contains(":"))) {
      Integer idx = (Integer) value.indexOf(":");
      String prefix = value.substring(0, idx);
      String suffix = value.substring(idx + 1);
      if (((prefix == null && ((Object) "_") == null || prefix != null && (prefix).equals("_")) || suffix.startsWith("//"))) {
        return value;
      }
      if ((localContext != null && localContext.containsKey(prefix) && defined != null)) {
        if ((!defined.containsKey(prefix) || defined.get(prefix) != true)) {
          new Term(this, localContext, prefix, localContext.get(prefix), defined);
        }
      }
      /*@Nullable*/ Term pfxTerm = (/*@Nullable*/ Term) this.terms.get(prefix);
      if ((pfxTerm != null && pfxTerm.iri != null && pfxTerm.isPrefix)) {
        return pfxTerm.iri + suffix;
      }
      if ((!(value.startsWith("#")) && isIri(value))) {
        return value;
      }
    }
    if ((vocab && this.vocabularyMapping != null)) {
      return this.vocabularyMapping + value;
    } else if (docRelative) {
      return resolveIri(this.baseIri, value);
    }
    return value;
  }
}
