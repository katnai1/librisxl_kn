/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/jsonld/testbase.py
 */
package trld.jsonld;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import trld.Output;
import static trld.Common.loadJson;
import static trld.jsonld.Base.*;
import static trld.jsonld.Expansion.expand;
import static trld.jsonld.Compaction.compact;
import static trld.jsonld.Flattening.flatten;
import trld.jsonld.RdfDataset;
import static trld.jsonld.Rdf.toJsonld;
import static trld.jsonld.Rdf.toRdfDataset;
import static trld.nq.Parser.load;
import static trld.nq.Serializer.serialize;
import static trld.jsonld.Testbase.*;


public class TestCase {
  public List<String> testtype;
  public String testid;
  public String name;
  public Map<String, Object> options;
  public String indocPath;
  public String baseUri;
  public Boolean compactArrays;
  public /*@Nullable*/ String expectedError;
  public /*@Nullable*/ String expectdocPath;
  public /*@Nullable*/ String expandContext;
  public /*@Nullable*/ String contextPath;
  public Object compactContext;

  public TestCase(String suitedir, Map tcData) {
    this.testtype = (List<String>) tcData.get(TYPE);
    this.testid = ((String) tcData.get(ID)).replace("#t", "");
    this.name = (String) tcData.get("name");
    this.options = ((Map) tcData.getOrDefault("option", new HashMap<>()));
    this.indocPath = suitedir + "/" + tcData.get("input");
    String baseUri = this.indocPath.replace(suitedir, TESTS_URL);
    this.baseUri = ((String) this.options.getOrDefault("base", baseUri));
    this.compactArrays = ((Boolean) this.options.getOrDefault("compactArrays", true));
    this.expectedError = (String) tcData.get("expectErrorCode");
    this.expectdocPath = null;
    /*@Nullable*/ String expectdocPath = (/*@Nullable*/ String) tcData.get("expect");
    if (expectdocPath != null) {
      this.expectdocPath = suitedir + "/" + expectdocPath;
    }
    this.expandContext = null;
    /*@Nullable*/ String expandContext = ((/*@Nullable*/ String) this.options.get("expandContext"));
    if (expandContext != null) {
      this.expandContext = suitedir + "/" + expandContext;
    }
    this.contextPath = null;
    this.compactContext = null;
    String contextPath = (String) ((String) tcData.get("context"));
    if (contextPath != null) {
      this.contextPath = suitedir + "/" + contextPath;
      this.compactContext = (Object) loadJson(this.contextPath.toString());
    }
  }

  public Map.Entry<Object, Object> run() {
    Object outData = null;
    if (this.testtype.contains("jld:FromRDFTest")) {
      outData = (Object) this.runFromRdfTest();
    } else if (this.testtype.contains("jld:ToRDFTest")) {
      outData = (Object) this.runToRdfTest();
    } else if ((this.testtype.contains("jld:ExpandTest") || this.testtype.contains("jld:CompactTest") || this.testtype.contains("jld:FlattenTest"))) {
      Object inData = (Object) loadJson(this.indocPath);
      outData = (Object) expand(((Object) inData), this.baseUri, this.expandContext, true);
    }
    if (this.testtype.contains("jld:FlattenTest")) {
      outData = (Object) flatten(((Object) outData), true);
    }
    if (this.compactContext != null) {
      outData = (Object) compact(this.compactContext, ((Object) outData), this.baseUri, this.compactArrays, true);
    }
    return new KeyValue(outData, this.loadExpectData());
  }

  public Object runFromRdfTest() {
    RdfDataset inData = new RdfDataset();
    try (Input inp = new Input(this.indocPath)) {
    }
    Boolean ordered = true;
    /*@Nullable*/ String rdfDirection = ((/*@Nullable*/ String) this.options.get("rdfDirection"));
    Boolean useNativeTypes = (Boolean) ((Boolean) this.options.getOrDefault("useNativeTypes", false));
    Boolean useRdfType = (Boolean) ((Boolean) this.options.getOrDefault("useRdfType", false));
    return toJsonld(inData, ordered, rdfDirection, useNativeTypes, useRdfType);
  }

  public Object runToRdfTest() {
    Output out = new Output();
    Object inData = (Object) ((Object) loadJson(this.indocPath));
    inData = expand(inData, this.baseUri, this.expandContext, true);
    /*@Nullable*/ String rdfDirection = ((/*@Nullable*/ String) this.options.get("rdfDirection"));
    RdfDataset dataset = toRdfDataset(inData, rdfDirection);
    serialize(dataset, out);
    return out.getValue();
  }

  protected /*@Nullable*/ Object loadExpectData() {
    if (this.expectdocPath != null) {
      assert this.testtype.contains("jld:PositiveEvaluationTest");
      if (this.expectdocPath.endsWith(".nq")) {
        try (Input inp = new Input(this.expectdocPath)) {
        }
      } else {
        Object expectData = (Object) loadJson(this.expectdocPath);
        if ((this.contextPath != null && expectData instanceof Map)) {
          ((Map) expectData).remove(CONTEXT);
        }
        return expectData;
      }
    } else if (this.testtype.contains("jld:PositiveSyntaxTest")) {
    } else {
      assert this.testtype.contains("jld:NegativeEvaluationTest");
    }
    return null;
  }
}
