/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.jsonEncode;
import trld.platform.Input;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadCollection extends ReadCompound {
  public ReadCollection(/*@Nullable*/ ParserState parent) { super(parent); };
  public List<Object> nodes;

  public void init() {
    this.reset();
  }

  public void reset() {
    this.nodes = new ArrayList<>();
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) {
    if (prevValue != null) {
      this.nodes.add(this.compactValue(prevValue));
    }
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c);
    if (readspace != null) {
      return readspace;
    } else if ((c == null && ((Object) EOF) == null || c != null && (c).equals(EOF))) {
      throw new NotationError("Unexpected EOF in collection.");
    } else if ((c == null && ((Object) ";") == null || c != null && (c).equals(";"))) {
      throw new NotationError("Unexpected \";\" in collection.");
    } else if ((c == null && ((Object) "[") == null || c != null && (c).equals("["))) {
      return new KeyValue(new ReadBNode(this), null);
    } else if ((c == null && ((Object) "(") == null || c != null && (c).equals("("))) {
      return new KeyValue(new ReadCollection(this), null);
    } else if ((c == null && ((Object) ")") == null || c != null && (c).equals(")"))) {
      return new KeyValue(this.parent, Builtins.mapOf(LIST, this.nodes));
    } else if (LITERAL_QUOTE_CHARS.contains(c)) {
      return new KeyValue(new ReadLiteral(this, c), null);
    } else {
      return new ReadSymbol(this).consume(c, null);
    }
  }
}
