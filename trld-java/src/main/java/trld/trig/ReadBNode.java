/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.jsonEncode;
import trld.platform.Input;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadBNode extends ReadNode {
  public ReadBNode(/*@Nullable*/ ParserState parent) { super(parent); };

  public void init() {
    this.reset();
  }

  public void reset() {
    this.node = new HashMap<>();
    this.p = null;
    this.lastValue = null;
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) {
    if (prevValue != null) {
      this.fillNode(prevValue);
    }
    if ((c == null && ((Object) EOF) == null || c != null && (c).equals(EOF))) {
      throw new NotationError("Unexpected " + c + " in bnode.");
    } else if ((c == null && ((Object) "]") == null || c != null && (c).equals("]"))) {
      return new KeyValue(this.parent, this.node);
    } else {
      return this.consumeNodeChar(c);
    }
  }
}
