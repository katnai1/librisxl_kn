/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.jsonEncode;
import trld.platform.Input;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadNumber extends ReadTerm {
  public ReadNumber(/*@Nullable*/ ParserState parent) { super(parent); };
  public final Set<String> EXP = new HashSet(new ArrayList<>(Arrays.asList(new String[] {(String) "E", "e"})));
  public /*@Nullable*/ String whole;
  public String dot;
  public Boolean exp;

  public void init() {
    this.whole = null;
    this.dot = "";
    this.exp = false;
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) {
    exp = this.EXP.contains(c);
    if (exp) {
      this.exp = true;
    }
    if ((this.whole == null && (c == null && ((Object) ".") == null || c != null && (c).equals(".")))) {
      this.whole = (String) this.pop();
      this.dot = c;
      return new KeyValue(this, null);
    } else if ((this.whole == null && exp)) {
      this.whole = (String) this.pop();
      this.collect(c);
      return new KeyValue(this, null);
    } else if ((c.matches("^\\d+$") || (this.whole == null && this.collected.size() == 0 && (NUMBER_LEAD_CHARS.matcher(c).matches() ? c : null) != null) || (this.whole != null && this.EXP.contains(c)) || (this.collected.size() > 0 && this.EXP.contains(this.collected.get(this.collected.size() - 1)) && (NUMBER_LEAD_CHARS.matcher(c).matches() ? c : null) != null))) {
      this.collect(c);
      return new KeyValue(this, null);
    } else {
      Object number;
      if ((this.whole != null && this.collected.size() == 0)) {
        if ((this.whole == null && ((Object) "") == null || this.whole != null && (this.whole).equals(""))) {
          return this.parent.consume(c, prevValue);
        }
        number = (Object) Integer.valueOf(this.whole);
        return this.backtrack(".", c, number);
      }
      try {
        number = (Object) this.toNumber();
      } catch (NumberFormatException e) {
        throw new NotationError("Invalid number character, got " + e);
      }
      return this.parent.consume(c, number);
    }
  }

  public Object toNumber() {
    String value = (String) this.pop();
    if (this.whole != null) {
      value = this.whole + this.dot + value;
      Double number = (Double) Double.parseDouble(value);
      if ((number % 1 == 0)) {
        return Builtins.mapOf(VALUE, value, TYPE, (this.exp ? XSD_DOUBLE : XSD_DECIMAL));
      }
      return number;
    } else {
      if ((value.length() > 1 && (TURTLE_INT_CHARS.matcher(value.substring(0, 0 + 1)).matches() ? value.substring(0, 0 + 1) : null) != null)) {
        return Builtins.mapOf(VALUE, value, TYPE, XSD_INTEGER);
      }
      return Integer.valueOf(value);
    }
  }
}
