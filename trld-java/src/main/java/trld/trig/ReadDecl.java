/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.jsonEncode;
import trld.platform.Input;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadDecl extends ReadCompound {
  public Boolean finalDot;
  public Boolean completed;

  public ReadDecl(ReadNodes parent, Boolean finalDot) {
    super(parent);
    this.finalDot = finalDot;
    this.completed = false;
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) {
    if (prevValue instanceof Map) {
      if (!(this.moreParts((Map) prevValue))) {
        this.completed = true;
        if (!(this.finalDot)) {
          this.declare();
          return this.parent.consume(c, null);
        }
      }
    }
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c);
    if (readspace != null) {
      return readspace;
    }
    if ((c == null && ((Object) ".") == null || c != null && (c).equals("."))) {
      this.declare();
      return new KeyValue(this.parent, null);
    } else if ((this.completed && this.finalDot)) {
      throw new NotationError("Expected a final dot");
    }
    return new ReadSymbol(this).consume(c, null);
  }

  public boolean moreParts(Map value) {
    throw new RuntimeException();
  }

  public void declare() {
    throw new RuntimeException();
  }
}
