/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.jsonEncode;
import trld.platform.Input;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadSymbol extends ReadTerm {
  public ReadSymbol(/*@Nullable*/ ParserState parent) { super(parent); };
  public static final Pattern MATCH = (Pattern) Pattern.compile("[^\\]\\[{}^<>\\\"\\s~!$&'()*,;=/?#]");
  public Boolean justEscaped;

  public void init() {
    this.escapeChars = RESERVED_CHARS.stream().collect(Collectors.toMap((c) -> c, (c) -> c));
    this.justEscaped = false;
  }

  public boolean accept(String c) {
    if ((this.MATCH.matcher(c).matches() ? c : null) == null) {
      return false;
    }
    if (((c == null && ((Object) ":") == null || c != null && (c).equals(":")) && this.collected.size() > 1 && ((this.collected.get(0) == null && ((Object) "_") == null || this.collected.get(0) != null && (this.collected.get(0)).equals("_")) && (this.collected.get(1) == null && ((Object) ":") == null || this.collected.get(1) != null && (this.collected.get(1)).equals(":"))))) {
      return false;
    }
    return true;
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) {
    if ((this.collected.size() == 0 && (c == null && ((Object) "<") == null || c != null && (c).equals("<")))) {
      return new KeyValue(new ReadIRI(this.parent), null);
    } else if ((this.collected.size() == 0 && (NUMBER_LEAD_CHARS.matcher(c).matches() ? c : null) != null)) {
      return new ReadNumber(this.parent).consume(c, null);
    } else if (this.handleEscape(c)) {
      this.justEscaped = true;
      return new KeyValue(this, null);
    }
    Boolean justEscaped = (Boolean) this.justEscaped;
    this.justEscaped = false;
    if (this.accept(c)) {
      this.collect(c);
      return new KeyValue(this, null);
    }
    String v = (String) this.pop();
    Boolean lastDot = false;
    if ((!(justEscaped) && v.endsWith("."))) {
      v = (v.length() >= 0 ? v.substring(0, v.length() - 1) : "");
      lastDot = true;
    }
    Object value = (Object) v;
    if (new HashSet(new ArrayList<>(Arrays.asList(new String[] {(String) "true", "false"}))).contains(v)) {
      value = ((Boolean) (v == null && ((Object) "true") == null || v != null && (v).equals("true")));
    } else if ((v == null && ((Object) "a") == null || v != null && (v).equals("a"))) {
      value = (Object) TYPE;
    } else if (!AT_KEYWORDS.contains(v)) {
      String lowered = (String) v.toLowerCase();
      if (RQ_KEYWORDS.contains(lowered)) {
        value = (Object) lowered;
      } else {
        if (!v.equals("")) {
          if (!v.contains(":")) {
            throw new NotationError("Expected PNname, got " + v);
          } else if ((v.substring(0, 0 + 1) == null && ((Object) ":") == null || v.substring(0, 0 + 1) != null && (v.substring(0, 0 + 1)).equals(":"))) {
            v = (v.length() >= 1 ? v.substring(1) : "");
          }
        }
        value = ((Map) Builtins.mapOf(SYMBOL, v));
      }
    }
    if (lastDot) {
      return this.backtrack(".", c, value);
    }
    return this.parent.consume(c, value);
  }
}
