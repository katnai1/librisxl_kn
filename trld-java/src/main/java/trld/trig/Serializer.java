/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/serializer.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.uuid4;
import trld.platform.Output;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.CONTAINER;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.INDEX;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.NONE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Base.REVERSE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;





public class Serializer {
  public static final Pattern WORD_START = (Pattern) Pattern.compile("^\\w*$");
  public static final Pattern PNAME_LOCAL_ESC = (Pattern) Pattern.compile("([~!$&'()*+,;=/?#@%]|^[.-]|[.-]$)");
  public static void serialize(Map<String, Object> data, Output out) {
    serialize(data, out, null);
  }
  public static void serialize(Map<String, Object> data, Output out, /*@Nullable*/ Map context) {
    serialize(data, out, context, null);
  }
  public static void serialize(Map<String, Object> data, Output out, /*@Nullable*/ Map context, /*@Nullable*/ String baseIri) {
    serialize(data, out, context, baseIri, null);
  }
  public static void serialize(Map<String, Object> data, Output out, /*@Nullable*/ Map context, /*@Nullable*/ String baseIri, /*@Nullable*/ Settings settings) {
    settings = (settings != null ? settings : new Settings());
    SerializerState state = new SerializerState(out, settings, context, baseIri);
    state.serialize(data);
  }
  public static void serializeTurtle(Map<String, Object> data, Output out) {
    serializeTurtle(data, out, null);
  }
  public static void serializeTurtle(Map<String, Object> data, Output out, /*@Nullable*/ Map context) {
    serializeTurtle(data, out, context, null);
  }
  public static void serializeTurtle(Map<String, Object> data, Output out, /*@Nullable*/ Map context, /*@Nullable*/ String baseIri) {
    serializeTurtle(data, out, context, baseIri, false);
  }
  public static void serializeTurtle(Map<String, Object> data, Output out, /*@Nullable*/ Map context, /*@Nullable*/ String baseIri, Boolean union) {
    Settings settings = new Settings(true, !(union));
    serialize(data, out, context, baseIri, settings);
  }
  public static Map<String, String> collectPrefixes(/*@Nullable*/ Object context) {
    if (!(context instanceof Map)) {
      return new HashMap<>();
    }
    Map prefixes = new HashMap<>();
    for (Map.Entry<String, Object> key_value : ((Map<String, Object>) context).entrySet()) {
      String key = key_value.getKey();
      Object value = key_value.getValue();
      if ((value instanceof String && PREFIX_DELIMS.contains(((String) value).substring(((String) value).length() - 1, ((String) value).length() - 1 + 1)))) {
        prefixes.put(((key == null && ((Object) VOCAB) == null || key != null && (key).equals(VOCAB)) ? "" : key), (String) value);
      } else if ((value instanceof Map && (((Map) value).get(PREFIX) == null && ((Object) true) == null || ((Map) value).get(PREFIX) != null && (((Map) value).get(PREFIX)).equals(true)))) {
        prefixes.put(key, ((Map) value).get(ID));
      }
    }
    return prefixes;
  }
  public static List asList(Object value) {
    return (value instanceof List ? (List) value : new ArrayList<>(Arrays.asList(new Object[] {(Object) value})));
  }
}
