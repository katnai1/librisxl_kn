/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadCompound extends BaseParserState {
  public ConsumeWs ws;
  public ConsumeComment comment;

  public ReadCompound(/*@Nullable*/ ParserState parent) {
    super(parent);
    this.ws = new ConsumeWs(this);
    this.comment = new ConsumeComment(this);
  }

  public /*@Nullable*/ Map.Entry<ParserState, Object> readSpace(String c) {
    if (this.ws.accept(c)) {
      return new KeyValue(this.ws, null);
    } else if ((c == null && ((Object) "#") == null || c != null && (c).equals("#"))) {
      return new KeyValue(this.comment, null);
    } else {
      return null;
    }
  }

  public Map nodeWithId(Map value) {
    if (value.containsKey(SYMBOL)) {
      String nodeId = (String) value.get(SYMBOL);
      if ((!nodeId.contains(":") && this.context.containsKey(VOCAB))) {
        nodeId = ((String) this.context.get(VOCAB)) + nodeId;
      }
      value = Builtins.mapOf(ID, nodeId);
    }
    return value;
  }

  public Object compactValue(Object value) {
    if (value instanceof Map) {
      if (((Map) value).containsKey(VALUE)) {
        if (((Map) value).size() == 1) {
          return ((Map) value).get(VALUE);
        }
      } else {
        return this.nodeWithId((Map) value);
      }
    }
    return value;
  }
}
