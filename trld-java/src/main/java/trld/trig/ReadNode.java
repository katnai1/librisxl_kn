/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.platform.Common.jsonEncode;
import trld.platform.Input;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.jsonld.Star.ANNOTATION;
import static trld.jsonld.Star.ANNOTATED_TYPE_KEY;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadNode extends ReadCompound {
  public ReadNode(/*@Nullable*/ ParserState parent) { super(parent); };
  public /*@Nullable*/ Map node;
  public /*@Nullable*/ String p;
  public /*@Nullable*/ Object lastValue;
  public Boolean openBrace = false;

  public void fillNode(Object value) {
    assert this.node != null;
    if (this.p == null) {
      if ((value == null && ((Object) TYPE) == null || value != null && (value).equals(TYPE))) {
        this.p = TYPE;
      } else {
        if (!(value instanceof Map)) {
          throw new NotationError("Unexpected predicate: " + value);
        }
        this.p = (String) this.symbol((Map) value);
      }
    } else if (this.lastValue == null) {
      if ((this.p == null && ((Object) TYPE) == null || this.p != null && (this.p).equals(TYPE))) {
        assert value instanceof Map;
        value = ((String) this.symbol((Map) value));
      }
      value = (Object) this.compactValue(value);
      /*@Nullable*/ Object given = (/*@Nullable*/ Object) this.node.get(this.p);
      if (given != null) {
        List values = (given instanceof List ? (List) given : new ArrayList<>(Arrays.asList(new Object[] {(Object) given})));
        values.add(value);
        this.node.put(this.p, values);
      } else {
        this.node.put(this.p, value);
      }
      this.lastValue = value;
    } else if ((value instanceof Map && ((Map) value).containsKey(ANNOTATION))) {
      Object lastValue = (Object) this.lastValue;
      if ((this.p == null && ((Object) TYPE) == null || this.p != null && (this.p).equals(TYPE))) {
        lastValue = Builtins.mapOf(ANNOTATED_TYPE_KEY, lastValue);
      } else if (!(lastValue instanceof Map)) {
        lastValue = Builtins.mapOf(VALUE, lastValue);
      }
      ((Map) lastValue).put(ANNOTATION, ((Map) value).get(ANNOTATION));
      if (this.node.get(this.p) instanceof List) {
        List l = (List) this.node.get(this.p);
        l.set(l.size() - 1, (Map) lastValue);
      } else {
        this.node.put(this.p, (Map) lastValue);
      }
    } else {
      throw new NotationError("Unexpected: " + value);
    }
  }

  public Map.Entry<ParserState, Object> consumeNodeChar(String c) {
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c);
    if (readspace != null) {
      return readspace;
    }
    if ((c == null && ((Object) "{") == null || c != null && (c).equals("{"))) {
      this.openBrace = true;
      return new KeyValue(this, null);
    } else if ((c == null && ((Object) "|") == null || c != null && (c).equals("|"))) {
      assert this.openBrace;
      this.openBrace = false;
      return new KeyValue(new ReadAnnotation(this), null);
    } else if ((c == null && ((Object) "[") == null || c != null && (c).equals("["))) {
      return new KeyValue(new ReadBNode(this), null);
    } else if ((c == null && ((Object) "(") == null || c != null && (c).equals("("))) {
      return new KeyValue(new ReadCollection(this), null);
    } else if ((c == null && ((Object) ";") == null || c != null && (c).equals(";"))) {
      if (this.node == null) {
        throw new NotationError("Unexpected: " + c);
      }
      this.p = null;
      this.lastValue = null;
      return new KeyValue(this, null);
    } else if ((c == null && ((Object) ",") == null || c != null && (c).equals(","))) {
      this.lastValue = null;
      return new KeyValue(this, null);
    } else if (LITERAL_QUOTE_CHARS.contains(c)) {
      return new KeyValue(new ReadLiteral(this, c), null);
    } else {
      return new ReadSymbol(this).consume(c, null);
    }
  }
}
