/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/nq/serializer.py
 */
package trld.nq;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Output;
import static trld.jsonld.Base.isBlank;
import trld.jsonld.RdfDataset;
import trld.jsonld.RdfGraph;
import trld.jsonld.RdfTriple;
import trld.jsonld.RdfLiteral;
import static trld.Rdfterms.XSD_STRING;

public class Serializer {

  public static void serialize(RdfDataset dataset, Output out) {
    for (RdfGraph graph : dataset) {
      writeGraph(graph, out);
    }
  }

  public static void writeGraph(RdfGraph graph, Output out) {
    for (RdfTriple triple : graph.triples) {
      if ((triple.s == null || triple.p == null || triple.o == null)) {
        continue;
      }
      out.writeln(reprQuad(triple, graph.name));
    }
  }

  public static String reprQuad(RdfTriple triple, /*@Nullable*/ String graphName) {
    String s = (String) reprTerm(triple.s);
    String p = (String) reprTerm(triple.p);
    String o = (String) reprTerm(triple.o);
    String spo = s + " " + p + " " + o;
    String quad = (graphName != null ? spo + " " + reprTerm(graphName) : spo);
    return quad + " .";
  }

  public static String reprTerm(Object t) {
    if (t instanceof String) {
      if (isBlank((String) t)) {
        return (String) t;
      } else {
        return "<" + t + ">";
      }
    } else {
      assert t instanceof RdfLiteral;
      String v = (String) ((RdfLiteral) t).value;
      v = v.replace("\\", "\\\\");
      v = v.replace("\"", "\\\"");
      v = "\"" + v + "\"";
      if (((RdfLiteral) t).language != null) {
        return v + "@" + ((RdfLiteral) t).language;
      } else if ((((RdfLiteral) t).datatype != null && !((RdfLiteral) t).datatype.equals(XSD_STRING))) {
        String dt = (String) reprTerm(((RdfLiteral) t).datatype);
        return v + "^^" + dt;
      } else {
        return v;
      }
    }
  }
}
